Design notes
------------

What I did was to create a simple analytics platform to do signal
generation and backtesting.  The signal gneration and strategies in
the system is not very good, but it's just used so that one can add a
lot of new analyics.

The original thing that I did was to use a python templates engine is
the glue code.  This makes it easy to create canned reports and the
intention here is to make it easy to add new strategies, signal
generators to the system

Doing a quick look at the data, it looking like that the strategies
that I've used to set up the system aren't going to be that
profitable, and that the money that is to be made with this would be a
market making strategy.

Princples
---------

* KISS Principle - Don't get too fancy.

* Load the data
* Do something to the data
* Display a report


Features
--------
** Should be able to run some canned data exploration
** Should be able to run different strategies and compare them
** Should be able to generate different metrics and outputs

** Since the spec says that they are interested in the framework and
   not the actual strategy, lets include some really dead simple
   strategies

** Moving average for strategies
** Sharpe ratios and friends for P&L
** Some statistic measures for histograms

** Add in some big data/ML stuff later


Things to plot next
-------------------
** pdfs to see deviation from GBM
** bin items
** animate evolution of order book
** connect to twisted

Not reinventing the wheel
-------------------------
** Ugh the data pipeline is dead simple
** Avoid creating another *framework*

** What should I build versus what should I copy
** There are probably a dozen frameworks for doing this, but I want a KISS clue code


The data 
--------
** Nothing too complicated.  Daily files.
** Start with daily trades

The tech
--------
** Quick and dirty python scripts and shell stuff
** Load in some pandas
** Run a strategy
** Get P&L
** Generate reports

** Run it through canned report generator
** I want to do canned data exploration myself
** So generate some plots but I want the plots to be reprooducable

** Modularize

Limitations
-----------
They seem to be interested in intraday trading.  So focus on that


ToDO
----
* Cythonize some of the functions
* Create a animation of the order book
* Create an adapter to the strategy so that the strategy module can be
  used in the trading system
* Run through different intraday files

Design decisions
----------------
Which language?
python - rapid prototyping - data requirements not huge
- will off load parts to c++ where critical

Which template engine?
Jinja2, mako, or genshi
Mako has most pythonic syntax

Focus?
Focus on data visualization and backtesting.  The strategy modules
should be designed so that they can be pushed to production, but
that's not immediate focus.

Design philosophy
-----------------
+ Don't overuse objects
+ Use dicts and pandas to move data

Extensions
----------
+ I want to be able to reuse strategy in production HFT system.  The
module that goes into the production system would likely be c++ and I
want to connect the C++ to a python adapter module.  I've put that off
in the current system since I don't know what the execution system
looks like.

Dependencies
------------
bokeh
pytz
mako
pandas

What I'd look for now
---------------------

The thing about the time series is that just a quick look suggests
that directional strategies are not likely to be very profitable.  The
straegies that might be useful would be market making strategies.

1) So what I'd do here would be to develop things that would visualize
things in bins which would let one see how much mean reversion there
would be.

2) Then put some more changes in portfolio manager that would model
buys and ses interacting with the order book.

3) Then I'd put in a simple mean reversion strategy, and look for
short term movements above or below the mean, and then see the
interaction with portfolio values.
